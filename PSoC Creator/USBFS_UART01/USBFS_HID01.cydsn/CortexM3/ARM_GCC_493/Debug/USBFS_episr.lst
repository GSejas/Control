ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"USBFS_episr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.USBFS_EP_1_ISR,"ax",%progbits
  19              		.align	2
  20              		.global	USBFS_EP_1_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	USBFS_EP_1_ISR, %function
  24              	USBFS_EP_1_ISR:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\USBFS_episr.c"
   1:.\Generated_Source\PSoC5/USBFS_episr.c **** /***************************************************************************//**
   2:.\Generated_Source\PSoC5/USBFS_episr.c **** * \file USBFS_episr.c
   3:.\Generated_Source\PSoC5/USBFS_episr.c **** * \version 3.0
   4:.\Generated_Source\PSoC5/USBFS_episr.c **** *
   5:.\Generated_Source\PSoC5/USBFS_episr.c **** * \brief
   6:.\Generated_Source\PSoC5/USBFS_episr.c **** *  This file contains the Data endpoint Interrupt Service Routines.
   7:.\Generated_Source\PSoC5/USBFS_episr.c **** *
   8:.\Generated_Source\PSoC5/USBFS_episr.c **** ********************************************************************************
   9:.\Generated_Source\PSoC5/USBFS_episr.c **** * \copyright
  10:.\Generated_Source\PSoC5/USBFS_episr.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11:.\Generated_Source\PSoC5/USBFS_episr.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:.\Generated_Source\PSoC5/USBFS_episr.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:.\Generated_Source\PSoC5/USBFS_episr.c **** * the software package with which this file was provided.
  14:.\Generated_Source\PSoC5/USBFS_episr.c **** *******************************************************************************/
  15:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  16:.\Generated_Source\PSoC5/USBFS_episr.c **** #include "USBFS_pvt.h"
  17:.\Generated_Source\PSoC5/USBFS_episr.c **** #include "USBFS_cydmac.h"
  18:.\Generated_Source\PSoC5/USBFS_episr.c **** #include "cyapicallbacks.h"
  19:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  20:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  21:.\Generated_Source\PSoC5/USBFS_episr.c **** /***************************************
  22:.\Generated_Source\PSoC5/USBFS_episr.c **** * Custom Declarations
  23:.\Generated_Source\PSoC5/USBFS_episr.c **** ***************************************/
  24:.\Generated_Source\PSoC5/USBFS_episr.c **** /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  25:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  26:.\Generated_Source\PSoC5/USBFS_episr.c **** /* `#END` */
  27:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  28:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  29:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP1_ISR_ACTIVE)
  30:.\Generated_Source\PSoC5/USBFS_episr.c ****     /******************************************************************************
  31:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_1_ISR
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 2


  32:.\Generated_Source\PSoC5/USBFS_episr.c ****     ***************************************************************************//**
  33:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
  34:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 1 Interrupt Service Routine
  35:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
  36:.\Generated_Source\PSoC5/USBFS_episr.c ****     ******************************************************************************/
  37:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_1_ISR)
  38:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
  27              		.loc 1 38 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  39:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  40:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_1_ISR_ENTRY_CALLBACK
  41:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_1_ISR_EntryCallback();
  42:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_1_ISR_ENTRY_CALLBACK) */
  43:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  44:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP1_USER_CODE` Place your code here */
  45:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  46:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
  47:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  48:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
  49:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
  50:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
  51:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
  52:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
  53:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
  54:.\Generated_Source\PSoC5/USBFS_episr.c ****     
  55:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP1_INTR);
  37              		.loc 1 55 0
  38 0004 104A     		ldr	r2, .L3
  39 0006 104B     		ldr	r3, .L3
  40 0008 1B78     		ldrb	r3, [r3]
  41 000a DBB2     		uxtb	r3, r3
  42 000c 23F00103 		bic	r3, r3, #1
  43 0010 DBB2     		uxtb	r3, r3
  44 0012 1370     		strb	r3, [r2]
  56:.\Generated_Source\PSoC5/USBFS_episr.c ****             
  57:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
  58:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
  59:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
  60:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
  61:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
  62:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP1].addr & USBFS_DIR_IN))
  63:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO) */
  64:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
  65:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
  66:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP1].epCr0;
  45              		.loc 1 66 0
  46 0014 0D4B     		ldr	r3, .L3+4
  47 0016 9B7C     		ldrb	r3, [r3, #18]
  67:.\Generated_Source\PSoC5/USBFS_episr.c ****             
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 3


  68:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
  69:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP1) != USBFS_EP_TYPE_ISOC)
  48              		.loc 1 69 0
  49 0018 0D4B     		ldr	r3, .L3+8
  50 001a 1B7B     		ldrb	r3, [r3, #12]
  51 001c DBB2     		uxtb	r3, r3
  52 001e 03F00303 		and	r3, r3, #3
  53 0022 012B     		cmp	r3, #1
  54 0024 08D0     		beq	.L2
  70:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
  71:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP1].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
  55              		.loc 1 71 0
  56 0026 0A4B     		ldr	r3, .L3+8
  57 0028 DB7B     		ldrb	r3, [r3, #15]
  58 002a DBB2     		uxtb	r3, r3
  59 002c 83F07F03 		eor	r3, r3, #127
  60 0030 DB43     		mvns	r3, r3
  61 0032 DAB2     		uxtb	r2, r3
  62 0034 064B     		ldr	r3, .L3+8
  63 0036 DA73     		strb	r2, [r3, #15]
  64              	.L2:
  72:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
  73:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  74:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
  75:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
  76:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
  77:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
  78:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
  79:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
  80:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP1].apiEpState = USBFS_EVENT_PENDING;
  65              		.loc 1 80 0
  66 0038 054B     		ldr	r3, .L3+8
  67 003a 0122     		movs	r2, #1
  68 003c 5A73     		strb	r2, [r3, #13]
  81:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
  82:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  83:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
  84:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
  85:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
  86:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP1)
  87:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
  88:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
  89:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
  90:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
  91:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
  92:.\Generated_Source\PSoC5/USBFS_episr.c ****     
  93:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP1_END_USER_CODE` Place your code here */
  94:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  95:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
  96:.\Generated_Source\PSoC5/USBFS_episr.c **** 
  97:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_1_ISR_EXIT_CALLBACK
  98:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_1_ISR_ExitCallback();
  99:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_1_ISR_EXIT_CALLBACK) */
 100:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 101:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 102:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 103:.\Generated_Source\PSoC5/USBFS_episr.c ****         
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 4


 104:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 105:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 106:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 107:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
  69              		.loc 1 107 0
  70 003e BD46     		mov	sp, r7
  71              		.cfi_def_cfa_register 13
  72              		@ sp needed
  73 0040 5DF8047B 		ldr	r7, [sp], #4
  74              		.cfi_restore 7
  75              		.cfi_def_cfa_offset 0
  76 0044 7047     		bx	lr
  77              	.L4:
  78 0046 00BF     		.align	2
  79              	.L3:
  80 0048 0B600040 		.word	1073766411
  81 004c FC5F0040 		.word	1073766396
  82 0050 00000000 		.word	USBFS_EP
  83              		.cfi_endproc
  84              	.LFE0:
  85              		.size	USBFS_EP_1_ISR, .-USBFS_EP_1_ISR
  86              		.section	.text.USBFS_SOF_ISR,"ax",%progbits
  87              		.align	2
  88              		.global	USBFS_SOF_ISR
  89              		.thumb
  90              		.thumb_func
  91              		.type	USBFS_SOF_ISR, %function
  92              	USBFS_SOF_ISR:
  93              	.LFB1:
 108:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 109:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP1_ISR_ACTIVE) */
 110:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 111:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 112:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP2_ISR_ACTIVE)
 113:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 114:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_2_ISR
 115:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 116:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 117:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 2 Interrupt Service Routine.
 118:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 119:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 120:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_2_ISR)
 121:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
 122:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_2_ISR_ENTRY_CALLBACK
 123:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_2_ISR_EntryCallback();
 124:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_2_ISR_ENTRY_CALLBACK) */
 125:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 126:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP2_USER_CODE` Place your code here */
 127:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 128:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 129:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 130:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 131:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 132:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 133:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 134:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 135:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 5


 136:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 137:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP2_INTR);
 138:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 139:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 140:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 141:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 142:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
 143:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 144:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP2].addr & USBFS_DIR_IN))
 145:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO) */
 146:.\Generated_Source\PSoC5/USBFS_episr.c ****         {            
 147:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 148:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP2].epCr0;
 149:.\Generated_Source\PSoC5/USBFS_episr.c ****             
 150:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 151:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP2) != USBFS_EP_TYPE_ISOC)
 152:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 153:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP2].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 154:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 155:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 156:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 157:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 158:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 159:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 160:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 161:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
 162:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP2].apiEpState = USBFS_EVENT_PENDING;
 163:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 164:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 165:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 166:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 167:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 168:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP2)
 169:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 170:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 171:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 172:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 173:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 174:.\Generated_Source\PSoC5/USBFS_episr.c ****     
 175:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP2_END_USER_CODE` Place your code here */
 176:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 177:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 178:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 179:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_2_ISR_EXIT_CALLBACK
 180:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_2_ISR_ExitCallback();
 181:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_2_ISR_EXIT_CALLBACK) */
 182:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 183:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 184:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 185:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 186:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 187:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 188:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 189:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 190:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP2_ISR_ACTIVE) */
 191:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 192:.\Generated_Source\PSoC5/USBFS_episr.c **** 
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 6


 193:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP3_ISR_ACTIVE)
 194:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 195:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_3_ISR
 196:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 197:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 198:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 3 Interrupt Service Routine.
 199:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 200:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 201:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_3_ISR)
 202:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
 203:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_3_ISR_ENTRY_CALLBACK
 204:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_3_ISR_EntryCallback();
 205:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_3_ISR_ENTRY_CALLBACK) */
 206:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 207:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP3_USER_CODE` Place your code here */
 208:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 209:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 210:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 211:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 212:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 213:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 214:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 215:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 216:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 217:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 218:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP3_INTR);    
 219:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 220:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 221:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 222:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 223:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
 224:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 225:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP3].addr & USBFS_DIR_IN))
 226:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 227:.\Generated_Source\PSoC5/USBFS_episr.c ****         {            
 228:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 229:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP3].epCr0;
 230:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 231:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 232:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP3) != USBFS_EP_TYPE_ISOC)
 233:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 234:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP3].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 235:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 236:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 237:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 238:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 239:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 240:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 241:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 242:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
 243:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP3].apiEpState = USBFS_EVENT_PENDING;
 244:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 245:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 246:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 247:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 248:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 249:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP3)
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 7


 250:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 251:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 252:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 253:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 254:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 255:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 256:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP3_END_USER_CODE` Place your code here */
 257:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 258:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 259:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 260:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_3_ISR_EXIT_CALLBACK
 261:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_3_ISR_ExitCallback();
 262:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_3_ISR_EXIT_CALLBACK) */
 263:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 264:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 265:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 266:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 267:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 268:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 269:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 270:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 271:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP3_ISR_ACTIVE) */
 272:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 273:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 274:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP4_ISR_ACTIVE)
 275:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 276:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_4_ISR
 277:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 278:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 279:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 4 Interrupt Service Routine.
 280:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 281:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 282:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_4_ISR)
 283:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
 284:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_4_ISR_ENTRY_CALLBACK
 285:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_4_ISR_EntryCallback();
 286:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_4_ISR_ENTRY_CALLBACK) */
 287:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 288:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP4_USER_CODE` Place your code here */
 289:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 290:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 291:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 292:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 293:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 294:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 295:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 296:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 297:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 298:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 299:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP4_INTR);
 300:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 301:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 302:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 303:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 304:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
 305:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 306:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP4].addr & USBFS_DIR_IN))
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 8


 307:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 308:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 309:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 310:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP4].epCr0;
 311:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 312:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 313:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP4) != USBFS_EP_TYPE_ISOC)
 314:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 315:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP4].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 316:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 317:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 318:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 319:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 320:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 321:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 322:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 323:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
 324:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP4].apiEpState = USBFS_EVENT_PENDING;
 325:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 326:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 327:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 328:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 329:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 330:.\Generated_Source\PSoC5/USBFS_episr.c ****             if(USBFS_midi_out_ep == USBFS_EP4)
 331:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 332:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 333:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 334:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 335:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 336:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 337:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP4_END_USER_CODE` Place your code here */
 338:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 339:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 340:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 341:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_4_ISR_EXIT_CALLBACK
 342:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_4_ISR_ExitCallback();
 343:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_4_ISR_EXIT_CALLBACK) */
 344:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 345:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 346:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 347:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 348:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 349:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 350:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 351:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 352:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP4_ISR_ACTIVE) */
 353:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 354:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 355:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP5_ISR_ACTIVE)
 356:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 357:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_5_ISR
 358:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 359:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 360:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 5 Interrupt Service Routine
 361:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 362:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 363:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 9


 364:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_5_ISR)
 365:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
 366:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_5_ISR_ENTRY_CALLBACK
 367:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_5_ISR_EntryCallback();
 368:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_5_ISR_ENTRY_CALLBACK) */
 369:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 370:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP5_USER_CODE` Place your code here */
 371:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 372:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 373:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 374:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 375:.\Generated_Source\PSoC5/USBFS_episr.c ****                  USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
 376:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 377:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 378:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 379:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 380:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 381:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP5_INTR);
 382:.\Generated_Source\PSoC5/USBFS_episr.c ****     
 383:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 384:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 385:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 386:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
 387:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 388:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP5].addr & USBFS_DIR_IN))
 389:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 390:.\Generated_Source\PSoC5/USBFS_episr.c ****         {            
 391:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 392:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP5].epCr0;
 393:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 394:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 395:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP5) != USBFS_EP_TYPE_ISOC)
 396:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 397:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP5].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 398:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 399:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 400:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 401:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 402:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 403:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 404:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 405:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
 406:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP5].apiEpState = USBFS_EVENT_PENDING;
 407:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 408:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 409:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))        
 410:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 411:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 412:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP5)
 413:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 414:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 415:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 416:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 417:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 418:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 419:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP5_END_USER_CODE` Place your code here */
 420:.\Generated_Source\PSoC5/USBFS_episr.c **** 
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 10


 421:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 422:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 423:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_5_ISR_EXIT_CALLBACK
 424:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_5_ISR_ExitCallback();
 425:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_5_ISR_EXIT_CALLBACK) */
 426:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 427:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 428:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 429:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 430:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 431:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 432:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 433:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 434:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP5_ISR_ACTIVE) */
 435:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 436:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 437:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP6_ISR_ACTIVE)
 438:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 439:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_6_ISR
 440:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 441:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 442:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 6 Interrupt Service Routine.
 443:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 444:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 445:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 446:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_6_ISR)
 447:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
 448:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_6_ISR_ENTRY_CALLBACK
 449:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_6_ISR_EntryCallback();
 450:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_6_ISR_ENTRY_CALLBACK) */
 451:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 452:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP6_USER_CODE` Place your code here */
 453:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 454:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 455:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 456:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 457:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 458:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 459:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 460:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 461:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 462:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 463:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP6_INTR);
 464:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 465:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 466:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 467:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 468:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
 469:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 470:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP6].addr & USBFS_DIR_IN))
 471:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 472:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 473:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 474:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP6].epCr0;
 475:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 476:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 477:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP6) != USBFS_EP_TYPE_ISOC)
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 11


 478:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 479:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP6].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 480:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 481:.\Generated_Source\PSoC5/USBFS_episr.c ****             
 482:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 483:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 484:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 485:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 486:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 487:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
 488:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP6].apiEpState = USBFS_EVENT_PENDING;
 489:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 490:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 491:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 492:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 493:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 494:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP6)
 495:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 496:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 497:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 498:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 499:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 500:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 501:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP6_END_USER_CODE` Place your code here */
 502:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 503:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 504:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 505:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_6_ISR_EXIT_CALLBACK
 506:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_6_ISR_ExitCallback();
 507:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_6_ISR_EXIT_CALLBACK) */
 508:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 509:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 510:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 511:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 512:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 513:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 514:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 515:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 516:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP6_ISR_ACTIVE) */
 517:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 518:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 519:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP7_ISR_ACTIVE)
 520:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 521:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_7_ISR
 522:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 523:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 524:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 7 Interrupt Service Routine.
 525:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 526:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 527:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 528:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_7_ISR)
 529:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
 530:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_7_ISR_ENTRY_CALLBACK
 531:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_7_ISR_EntryCallback();
 532:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_7_ISR_ENTRY_CALLBACK) */
 533:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 534:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP7_USER_CODE` Place your code here */
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 12


 535:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 536:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 537:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 538:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 539:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 540:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 541:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 542:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 543:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 544:.\Generated_Source\PSoC5/USBFS_episr.c ****     
 545:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP7_INTR);
 546:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 547:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 548:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 549:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 550:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
 551:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 552:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP7].addr & USBFS_DIR_IN))
 553:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 554:.\Generated_Source\PSoC5/USBFS_episr.c ****         {           
 555:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 556:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP7].epCr0;
 557:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 558:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 559:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP7) != USBFS_EP_TYPE_ISOC)
 560:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 561:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP7].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 562:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 563:.\Generated_Source\PSoC5/USBFS_episr.c ****             
 564:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 565:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 566:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 567:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 568:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 569:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
 570:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP7].apiEpState = USBFS_EVENT_PENDING;
 571:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 572:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 573:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 574:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 575:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 576:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 577:.\Generated_Source\PSoC5/USBFS_episr.c ****             if(USBFS_midi_out_ep == USBFS_EP7)
 578:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 579:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 580:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 581:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 582:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 583:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 584:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP7_END_USER_CODE` Place your code here */
 585:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 586:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 587:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 588:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_7_ISR_EXIT_CALLBACK
 589:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_7_ISR_ExitCallback();
 590:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_7_ISR_EXIT_CALLBACK) */
 591:.\Generated_Source\PSoC5/USBFS_episr.c **** 
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 13


 592:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 593:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 594:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 595:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 596:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 597:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 598:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 599:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP7_ISR_ACTIVE) */
 600:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 601:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 602:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP8_ISR_ACTIVE)
 603:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 604:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_8_ISR
 605:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 606:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 607:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 8 Interrupt Service Routine
 608:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 609:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 610:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 611:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_8_ISR)
 612:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
 613:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_8_ISR_ENTRY_CALLBACK
 614:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_8_ISR_EntryCallback();
 615:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_8_ISR_ENTRY_CALLBACK) */
 616:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 617:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP8_USER_CODE` Place your code here */
 618:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 619:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 620:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 621:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 622:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 623:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 624:.\Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 625:.\Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 626:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 627:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 628:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP8_INTR);
 629:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 630:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 631:.\Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 632:.\Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 633:.\Generated_Source\PSoC5/USBFS_episr.c ****         */
 634:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 635:.\Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP8].addr & USBFS_DIR_IN))
 636:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 637:.\Generated_Source\PSoC5/USBFS_episr.c ****         {
 638:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 639:.\Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP8].epCr0;
 640:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 641:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 642:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP8) != USBFS_EP_TYPE_ISOC)
 643:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 644:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP8].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 645:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 646:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 647:.\Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 648:.\Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 14


 649:.\Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 650:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 651:.\Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 652:.\Generated_Source\PSoC5/USBFS_episr.c ****             */
 653:.\Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP8].apiEpState = USBFS_EVENT_PENDING;
 654:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 655:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 656:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 657:.\Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 658:.\Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 659:.\Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP8)
 660:.\Generated_Source\PSoC5/USBFS_episr.c ****             {
 661:.\Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 662:.\Generated_Source\PSoC5/USBFS_episr.c ****             }
 663:.\Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 664:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 665:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 666:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP8_END_USER_CODE` Place your code here */
 667:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 668:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 669:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 670:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_8_ISR_EXIT_CALLBACK
 671:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_8_ISR_ExitCallback();
 672:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_8_ISR_EXIT_CALLBACK) */
 673:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 674:.\Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 675:.\Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 676:.\Generated_Source\PSoC5/USBFS_episr.c ****         
 677:.\Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 678:.\Generated_Source\PSoC5/USBFS_episr.c ****         }
 679:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 680:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 681:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP8_ISR_ACTIVE) */
 682:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 683:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 684:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_SOF_ISR_ACTIVE)
 685:.\Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 686:.\Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_SOF_ISR
 687:.\Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 688:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 689:.\Generated_Source\PSoC5/USBFS_episr.c ****     *  Start of Frame Interrupt Service Routine.
 690:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 691:.\Generated_Source\PSoC5/USBFS_episr.c ****     *
 692:.\Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 693:.\Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_SOF_ISR)
 694:.\Generated_Source\PSoC5/USBFS_episr.c ****     {
  94              		.loc 1 694 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0000 80B4     		push	{r7}
 100              		.cfi_def_cfa_offset 4
 101              		.cfi_offset 7, -4
 102 0002 00AF     		add	r7, sp, #0
 103              		.cfi_def_cfa_register 7
 695:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_SOF_ISR_ENTRY_CALLBACK
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 15


 696:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_SOF_ISR_EntryCallback();
 697:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_SOF_ISR_ENTRY_CALLBACK) */
 698:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 699:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START SOF_USER_CODE` Place your code here */
 700:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 701:.\Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 702:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 703:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieInterruptSource(USBFS_INTR_SIE_SOF_INTR);
 704:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 705:.\Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_SOF_ISR_EXIT_CALLBACK
 706:.\Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_SOF_ISR_ExitCallback();
 707:.\Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_SOF_ISR_EXIT_CALLBACK) */
 708:.\Generated_Source\PSoC5/USBFS_episr.c ****     }
 104              		.loc 1 708 0
 105 0004 BD46     		mov	sp, r7
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 0006 5DF8047B 		ldr	r7, [sp], #4
 109              		.cfi_restore 7
 110              		.cfi_def_cfa_offset 0
 111 000a 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE1:
 114              		.size	USBFS_SOF_ISR, .-USBFS_SOF_ISR
 115              		.section	.text.USBFS_BUS_RESET_ISR,"ax",%progbits
 116              		.align	2
 117              		.global	USBFS_BUS_RESET_ISR
 118              		.thumb
 119              		.thumb_func
 120              		.type	USBFS_BUS_RESET_ISR, %function
 121              	USBFS_BUS_RESET_ISR:
 122              	.LFB2:
 709:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_SOF_ISR_ACTIVE) */
 710:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 711:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 712:.\Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_BUS_RESET_ISR_ACTIVE)
 713:.\Generated_Source\PSoC5/USBFS_episr.c **** /*******************************************************************************
 714:.\Generated_Source\PSoC5/USBFS_episr.c **** * Function Name: USBFS_BUS_RESET_ISR
 715:.\Generated_Source\PSoC5/USBFS_episr.c **** ****************************************************************************//**
 716:.\Generated_Source\PSoC5/USBFS_episr.c **** *
 717:.\Generated_Source\PSoC5/USBFS_episr.c **** *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 718:.\Generated_Source\PSoC5/USBFS_episr.c **** *  parameters as the last USER call to _Start
 719:.\Generated_Source\PSoC5/USBFS_episr.c **** *
 720:.\Generated_Source\PSoC5/USBFS_episr.c **** *
 721:.\Generated_Source\PSoC5/USBFS_episr.c **** *******************************************************************************/
 722:.\Generated_Source\PSoC5/USBFS_episr.c **** CY_ISR(USBFS_BUS_RESET_ISR)
 723:.\Generated_Source\PSoC5/USBFS_episr.c **** {
 123              		.loc 1 723 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 0000 80B5     		push	{r7, lr}
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 00AF     		add	r7, sp, #0
 132              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 16


 724:.\Generated_Source\PSoC5/USBFS_episr.c **** #ifdef USBFS_BUS_RESET_ISR_ENTRY_CALLBACK
 725:.\Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_BUS_RESET_ISR_EntryCallback();
 726:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_BUS_RESET_ISR_ENTRY_CALLBACK) */
 727:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 728:.\Generated_Source\PSoC5/USBFS_episr.c ****     /* `#START BUS_RESET_USER_CODE` Place your code here */
 729:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 730:.\Generated_Source\PSoC5/USBFS_episr.c ****     /* `#END` */
 731:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 732:.\Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_ClearSieInterruptSource(USBFS_INTR_SIE_BUS_RESET_INTR);
 733:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 734:.\Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_ReInitComponent();
 133              		.loc 1 734 0
 134 0004 FFF7FEFF 		bl	USBFS_ReInitComponent
 735:.\Generated_Source\PSoC5/USBFS_episr.c **** 
 736:.\Generated_Source\PSoC5/USBFS_episr.c **** #ifdef USBFS_BUS_RESET_ISR_EXIT_CALLBACK
 737:.\Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_BUS_RESET_ISR_ExitCallback();
 738:.\Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_BUS_RESET_ISR_EXIT_CALLBACK) */
 739:.\Generated_Source\PSoC5/USBFS_episr.c **** }
 135              		.loc 1 739 0
 136 0008 80BD     		pop	{r7, pc}
 137              		.cfi_endproc
 138              	.LFE2:
 139              		.size	USBFS_BUS_RESET_ISR, .-USBFS_BUS_RESET_ISR
 140 000a 00BF     		.text
 141              	.Letext0:
 142              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 143              		.file 3 ".\\Generated_Source\\PSoC5\\USBFS.h"
 144              		.file 4 ".\\Generated_Source\\PSoC5\\USBFS_pvt.h"
 145              		.section	.debug_info,"",%progbits
 146              	.Ldebug_info0:
 147 0000 09020000 		.4byte	0x209
 148 0004 0400     		.2byte	0x4
 149 0006 00000000 		.4byte	.Ldebug_abbrev0
 150 000a 04       		.byte	0x4
 151 000b 01       		.uleb128 0x1
 152 000c D8000000 		.4byte	.LASF35
 153 0010 01       		.byte	0x1
 154 0011 6D000000 		.4byte	.LASF36
 155 0015 0F020000 		.4byte	.LASF37
 156 0019 00000000 		.4byte	.Ldebug_ranges0+0
 157 001d 00000000 		.4byte	0
 158 0021 00000000 		.4byte	.Ldebug_line0
 159 0025 02       		.uleb128 0x2
 160 0026 01       		.byte	0x1
 161 0027 06       		.byte	0x6
 162 0028 77020000 		.4byte	.LASF0
 163 002c 02       		.uleb128 0x2
 164 002d 01       		.byte	0x1
 165 002e 08       		.byte	0x8
 166 002f 5F000000 		.4byte	.LASF1
 167 0033 02       		.uleb128 0x2
 168 0034 02       		.byte	0x2
 169 0035 05       		.byte	0x5
 170 0036 54020000 		.4byte	.LASF2
 171 003a 02       		.uleb128 0x2
 172 003b 02       		.byte	0x2
 173 003c 07       		.byte	0x7
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 17


 174 003d 0C000000 		.4byte	.LASF3
 175 0041 02       		.uleb128 0x2
 176 0042 04       		.byte	0x4
 177 0043 05       		.byte	0x5
 178 0044 6E020000 		.4byte	.LASF4
 179 0048 02       		.uleb128 0x2
 180 0049 04       		.byte	0x4
 181 004a 07       		.byte	0x7
 182 004b A4000000 		.4byte	.LASF5
 183 004f 02       		.uleb128 0x2
 184 0050 08       		.byte	0x8
 185 0051 05       		.byte	0x5
 186 0052 FC010000 		.4byte	.LASF6
 187 0056 02       		.uleb128 0x2
 188 0057 08       		.byte	0x8
 189 0058 07       		.byte	0x7
 190 0059 B5010000 		.4byte	.LASF7
 191 005d 03       		.uleb128 0x3
 192 005e 04       		.byte	0x4
 193 005f 05       		.byte	0x5
 194 0060 696E7400 		.ascii	"int\000"
 195 0064 02       		.uleb128 0x2
 196 0065 04       		.byte	0x4
 197 0066 07       		.byte	0x7
 198 0067 A8010000 		.4byte	.LASF8
 199 006b 04       		.uleb128 0x4
 200 006c 5E020000 		.4byte	.LASF9
 201 0070 02       		.byte	0x2
 202 0071 3801     		.2byte	0x138
 203 0073 2C000000 		.4byte	0x2c
 204 0077 04       		.uleb128 0x4
 205 0078 8C010000 		.4byte	.LASF10
 206 007c 02       		.byte	0x2
 207 007d 3901     		.2byte	0x139
 208 007f 3A000000 		.4byte	0x3a
 209 0083 02       		.uleb128 0x2
 210 0084 04       		.byte	0x4
 211 0085 04       		.byte	0x4
 212 0086 06000000 		.4byte	.LASF11
 213 008a 02       		.uleb128 0x2
 214 008b 08       		.byte	0x8
 215 008c 04       		.byte	0x4
 216 008d 66010000 		.4byte	.LASF12
 217 0091 02       		.uleb128 0x2
 218 0092 01       		.byte	0x1
 219 0093 08       		.byte	0x8
 220 0094 0A020000 		.4byte	.LASF13
 221 0098 04       		.uleb128 0x4
 222 0099 94000000 		.4byte	.LASF14
 223 009d 02       		.byte	0x2
 224 009e E201     		.2byte	0x1e2
 225 00a0 A4000000 		.4byte	0xa4
 226 00a4 05       		.uleb128 0x5
 227 00a5 6B000000 		.4byte	0x6b
 228 00a9 02       		.uleb128 0x2
 229 00aa 04       		.byte	0x4
 230 00ab 07       		.byte	0x7
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 18


 231 00ac E5010000 		.4byte	.LASF15
 232 00b0 06       		.uleb128 0x6
 233 00b1 0C       		.byte	0xc
 234 00b2 03       		.byte	0x3
 235 00b3 93       		.byte	0x93
 236 00b4 25010000 		.4byte	0x125
 237 00b8 07       		.uleb128 0x7
 238 00b9 EE010000 		.4byte	.LASF16
 239 00bd 03       		.byte	0x3
 240 00be 95       		.byte	0x95
 241 00bf 6B000000 		.4byte	0x6b
 242 00c3 00       		.byte	0
 243 00c4 07       		.uleb128 0x7
 244 00c5 99000000 		.4byte	.LASF17
 245 00c9 03       		.byte	0x3
 246 00ca 96       		.byte	0x96
 247 00cb 6B000000 		.4byte	0x6b
 248 00cf 01       		.byte	0x1
 249 00d0 07       		.uleb128 0x7
 250 00d1 CC010000 		.4byte	.LASF18
 251 00d5 03       		.byte	0x3
 252 00d6 97       		.byte	0x97
 253 00d7 6B000000 		.4byte	0x6b
 254 00db 02       		.byte	0x2
 255 00dc 07       		.uleb128 0x7
 256 00dd 56000000 		.4byte	.LASF19
 257 00e1 03       		.byte	0x3
 258 00e2 98       		.byte	0x98
 259 00e3 6B000000 		.4byte	0x6b
 260 00e7 03       		.byte	0x3
 261 00e8 07       		.uleb128 0x7
 262 00e9 B6000000 		.4byte	.LASF20
 263 00ed 03       		.byte	0x3
 264 00ee 99       		.byte	0x99
 265 00ef 6B000000 		.4byte	0x6b
 266 00f3 04       		.byte	0x4
 267 00f4 07       		.uleb128 0x7
 268 00f5 F5010000 		.4byte	.LASF21
 269 00f9 03       		.byte	0x3
 270 00fa 9A       		.byte	0x9a
 271 00fb 6B000000 		.4byte	0x6b
 272 00ff 05       		.byte	0x5
 273 0100 07       		.uleb128 0x7
 274 0101 81010000 		.4byte	.LASF22
 275 0105 03       		.byte	0x3
 276 0106 9B       		.byte	0x9b
 277 0107 77000000 		.4byte	0x77
 278 010b 06       		.byte	0x6
 279 010c 07       		.uleb128 0x7
 280 010d 49020000 		.4byte	.LASF23
 281 0111 03       		.byte	0x3
 282 0112 9C       		.byte	0x9c
 283 0113 77000000 		.4byte	0x77
 284 0117 08       		.byte	0x8
 285 0118 07       		.uleb128 0x7
 286 0119 64020000 		.4byte	.LASF24
 287 011d 03       		.byte	0x3
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 19


 288 011e 9D       		.byte	0x9d
 289 011f 6B000000 		.4byte	0x6b
 290 0123 0A       		.byte	0xa
 291 0124 00       		.byte	0
 292 0125 08       		.uleb128 0x8
 293 0126 1F000000 		.4byte	.LASF25
 294 012a 03       		.byte	0x3
 295 012b 9E       		.byte	0x9e
 296 012c B0000000 		.4byte	0xb0
 297 0130 06       		.uleb128 0x6
 298 0131 10       		.byte	0x10
 299 0132 03       		.byte	0x3
 300 0133 DA       		.byte	0xda
 301 0134 69010000 		.4byte	0x169
 302 0138 07       		.uleb128 0x7
 303 0139 48000000 		.4byte	.LASF26
 304 013d 03       		.byte	0x3
 305 013e DC       		.byte	0xdc
 306 013f 6B000000 		.4byte	0x6b
 307 0143 00       		.byte	0
 308 0144 07       		.uleb128 0x7
 309 0145 4F000000 		.4byte	.LASF27
 310 0149 03       		.byte	0x3
 311 014a DD       		.byte	0xdd
 312 014b 6B000000 		.4byte	0x6b
 313 014f 01       		.byte	0x1
 314 0150 07       		.uleb128 0x7
 315 0151 00000000 		.4byte	.LASF28
 316 0155 03       		.byte	0x3
 317 0156 DE       		.byte	0xde
 318 0157 6B000000 		.4byte	0x6b
 319 015b 02       		.byte	0x2
 320 015c 09       		.uleb128 0x9
 321 015d 67617000 		.ascii	"gap\000"
 322 0161 03       		.byte	0x3
 323 0162 DF       		.byte	0xdf
 324 0163 69010000 		.4byte	0x169
 325 0167 03       		.byte	0x3
 326 0168 00       		.byte	0
 327 0169 0A       		.uleb128 0xa
 328 016a 6B000000 		.4byte	0x6b
 329 016e 79010000 		.4byte	0x179
 330 0172 0B       		.uleb128 0xb
 331 0173 A9000000 		.4byte	0xa9
 332 0177 0C       		.byte	0xc
 333 0178 00       		.byte	0
 334 0179 08       		.uleb128 0x8
 335 017a 6D010000 		.4byte	.LASF29
 336 017e 03       		.byte	0x3
 337 017f E0       		.byte	0xe0
 338 0180 30010000 		.4byte	0x130
 339 0184 0C       		.uleb128 0xc
 340 0185 90       		.byte	0x90
 341 0186 03       		.byte	0x3
 342 0187 1401     		.2byte	0x114
 343 0189 9B010000 		.4byte	0x19b
 344 018d 0D       		.uleb128 0xd
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 20


 345 018e C9000000 		.4byte	.LASF30
 346 0192 03       		.byte	0x3
 347 0193 1601     		.2byte	0x116
 348 0195 9B010000 		.4byte	0x19b
 349 0199 00       		.byte	0
 350 019a 00       		.byte	0
 351 019b 0A       		.uleb128 0xa
 352 019c 79010000 		.4byte	0x179
 353 01a0 AB010000 		.4byte	0x1ab
 354 01a4 0B       		.uleb128 0xb
 355 01a5 A9000000 		.4byte	0xa9
 356 01a9 08       		.byte	0x8
 357 01aa 00       		.byte	0
 358 01ab 04       		.uleb128 0x4
 359 01ac 93010000 		.4byte	.LASF31
 360 01b0 03       		.byte	0x3
 361 01b1 1701     		.2byte	0x117
 362 01b3 84010000 		.4byte	0x184
 363 01b7 0E       		.uleb128 0xe
 364 01b8 D6010000 		.4byte	.LASF32
 365 01bc 01       		.byte	0x1
 366 01bd 25       		.byte	0x25
 367 01be 00000000 		.4byte	.LFB0
 368 01c2 54000000 		.4byte	.LFE0-.LFB0
 369 01c6 01       		.uleb128 0x1
 370 01c7 9C       		.byte	0x9c
 371 01c8 0F       		.uleb128 0xf
 372 01c9 BB000000 		.4byte	.LASF33
 373 01cd 01       		.byte	0x1
 374 01ce B502     		.2byte	0x2b5
 375 01d0 00000000 		.4byte	.LFB1
 376 01d4 0C000000 		.4byte	.LFE1-.LFB1
 377 01d8 01       		.uleb128 0x1
 378 01d9 9C       		.byte	0x9c
 379 01da 10       		.uleb128 0x10
 380 01db 34000000 		.4byte	.LASF34
 381 01df 01       		.byte	0x1
 382 01e0 D202     		.2byte	0x2d2
 383 01e2 00000000 		.4byte	.LFB2
 384 01e6 0A000000 		.4byte	.LFE2-.LFB2
 385 01ea 01       		.uleb128 0x1
 386 01eb 9C       		.byte	0x9c
 387 01ec 0A       		.uleb128 0xa
 388 01ed 25010000 		.4byte	0x125
 389 01f1 FC010000 		.4byte	0x1fc
 390 01f5 0B       		.uleb128 0xb
 391 01f6 A9000000 		.4byte	0xa9
 392 01fa 08       		.byte	0x8
 393 01fb 00       		.byte	0
 394 01fc 11       		.uleb128 0x11
 395 01fd CF000000 		.4byte	.LASF38
 396 0201 04       		.byte	0x4
 397 0202 80       		.byte	0x80
 398 0203 07020000 		.4byte	0x207
 399 0207 05       		.uleb128 0x5
 400 0208 EC010000 		.4byte	0x1ec
 401 020c 00       		.byte	0
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 21


 402              		.section	.debug_abbrev,"",%progbits
 403              	.Ldebug_abbrev0:
 404 0000 01       		.uleb128 0x1
 405 0001 11       		.uleb128 0x11
 406 0002 01       		.byte	0x1
 407 0003 25       		.uleb128 0x25
 408 0004 0E       		.uleb128 0xe
 409 0005 13       		.uleb128 0x13
 410 0006 0B       		.uleb128 0xb
 411 0007 03       		.uleb128 0x3
 412 0008 0E       		.uleb128 0xe
 413 0009 1B       		.uleb128 0x1b
 414 000a 0E       		.uleb128 0xe
 415 000b 55       		.uleb128 0x55
 416 000c 17       		.uleb128 0x17
 417 000d 11       		.uleb128 0x11
 418 000e 01       		.uleb128 0x1
 419 000f 10       		.uleb128 0x10
 420 0010 17       		.uleb128 0x17
 421 0011 00       		.byte	0
 422 0012 00       		.byte	0
 423 0013 02       		.uleb128 0x2
 424 0014 24       		.uleb128 0x24
 425 0015 00       		.byte	0
 426 0016 0B       		.uleb128 0xb
 427 0017 0B       		.uleb128 0xb
 428 0018 3E       		.uleb128 0x3e
 429 0019 0B       		.uleb128 0xb
 430 001a 03       		.uleb128 0x3
 431 001b 0E       		.uleb128 0xe
 432 001c 00       		.byte	0
 433 001d 00       		.byte	0
 434 001e 03       		.uleb128 0x3
 435 001f 24       		.uleb128 0x24
 436 0020 00       		.byte	0
 437 0021 0B       		.uleb128 0xb
 438 0022 0B       		.uleb128 0xb
 439 0023 3E       		.uleb128 0x3e
 440 0024 0B       		.uleb128 0xb
 441 0025 03       		.uleb128 0x3
 442 0026 08       		.uleb128 0x8
 443 0027 00       		.byte	0
 444 0028 00       		.byte	0
 445 0029 04       		.uleb128 0x4
 446 002a 16       		.uleb128 0x16
 447 002b 00       		.byte	0
 448 002c 03       		.uleb128 0x3
 449 002d 0E       		.uleb128 0xe
 450 002e 3A       		.uleb128 0x3a
 451 002f 0B       		.uleb128 0xb
 452 0030 3B       		.uleb128 0x3b
 453 0031 05       		.uleb128 0x5
 454 0032 49       		.uleb128 0x49
 455 0033 13       		.uleb128 0x13
 456 0034 00       		.byte	0
 457 0035 00       		.byte	0
 458 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 22


 459 0037 35       		.uleb128 0x35
 460 0038 00       		.byte	0
 461 0039 49       		.uleb128 0x49
 462 003a 13       		.uleb128 0x13
 463 003b 00       		.byte	0
 464 003c 00       		.byte	0
 465 003d 06       		.uleb128 0x6
 466 003e 13       		.uleb128 0x13
 467 003f 01       		.byte	0x1
 468 0040 0B       		.uleb128 0xb
 469 0041 0B       		.uleb128 0xb
 470 0042 3A       		.uleb128 0x3a
 471 0043 0B       		.uleb128 0xb
 472 0044 3B       		.uleb128 0x3b
 473 0045 0B       		.uleb128 0xb
 474 0046 01       		.uleb128 0x1
 475 0047 13       		.uleb128 0x13
 476 0048 00       		.byte	0
 477 0049 00       		.byte	0
 478 004a 07       		.uleb128 0x7
 479 004b 0D       		.uleb128 0xd
 480 004c 00       		.byte	0
 481 004d 03       		.uleb128 0x3
 482 004e 0E       		.uleb128 0xe
 483 004f 3A       		.uleb128 0x3a
 484 0050 0B       		.uleb128 0xb
 485 0051 3B       		.uleb128 0x3b
 486 0052 0B       		.uleb128 0xb
 487 0053 49       		.uleb128 0x49
 488 0054 13       		.uleb128 0x13
 489 0055 38       		.uleb128 0x38
 490 0056 0B       		.uleb128 0xb
 491 0057 00       		.byte	0
 492 0058 00       		.byte	0
 493 0059 08       		.uleb128 0x8
 494 005a 16       		.uleb128 0x16
 495 005b 00       		.byte	0
 496 005c 03       		.uleb128 0x3
 497 005d 0E       		.uleb128 0xe
 498 005e 3A       		.uleb128 0x3a
 499 005f 0B       		.uleb128 0xb
 500 0060 3B       		.uleb128 0x3b
 501 0061 0B       		.uleb128 0xb
 502 0062 49       		.uleb128 0x49
 503 0063 13       		.uleb128 0x13
 504 0064 00       		.byte	0
 505 0065 00       		.byte	0
 506 0066 09       		.uleb128 0x9
 507 0067 0D       		.uleb128 0xd
 508 0068 00       		.byte	0
 509 0069 03       		.uleb128 0x3
 510 006a 08       		.uleb128 0x8
 511 006b 3A       		.uleb128 0x3a
 512 006c 0B       		.uleb128 0xb
 513 006d 3B       		.uleb128 0x3b
 514 006e 0B       		.uleb128 0xb
 515 006f 49       		.uleb128 0x49
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 23


 516 0070 13       		.uleb128 0x13
 517 0071 38       		.uleb128 0x38
 518 0072 0B       		.uleb128 0xb
 519 0073 00       		.byte	0
 520 0074 00       		.byte	0
 521 0075 0A       		.uleb128 0xa
 522 0076 01       		.uleb128 0x1
 523 0077 01       		.byte	0x1
 524 0078 49       		.uleb128 0x49
 525 0079 13       		.uleb128 0x13
 526 007a 01       		.uleb128 0x1
 527 007b 13       		.uleb128 0x13
 528 007c 00       		.byte	0
 529 007d 00       		.byte	0
 530 007e 0B       		.uleb128 0xb
 531 007f 21       		.uleb128 0x21
 532 0080 00       		.byte	0
 533 0081 49       		.uleb128 0x49
 534 0082 13       		.uleb128 0x13
 535 0083 2F       		.uleb128 0x2f
 536 0084 0B       		.uleb128 0xb
 537 0085 00       		.byte	0
 538 0086 00       		.byte	0
 539 0087 0C       		.uleb128 0xc
 540 0088 13       		.uleb128 0x13
 541 0089 01       		.byte	0x1
 542 008a 0B       		.uleb128 0xb
 543 008b 0B       		.uleb128 0xb
 544 008c 3A       		.uleb128 0x3a
 545 008d 0B       		.uleb128 0xb
 546 008e 3B       		.uleb128 0x3b
 547 008f 05       		.uleb128 0x5
 548 0090 01       		.uleb128 0x1
 549 0091 13       		.uleb128 0x13
 550 0092 00       		.byte	0
 551 0093 00       		.byte	0
 552 0094 0D       		.uleb128 0xd
 553 0095 0D       		.uleb128 0xd
 554 0096 00       		.byte	0
 555 0097 03       		.uleb128 0x3
 556 0098 0E       		.uleb128 0xe
 557 0099 3A       		.uleb128 0x3a
 558 009a 0B       		.uleb128 0xb
 559 009b 3B       		.uleb128 0x3b
 560 009c 05       		.uleb128 0x5
 561 009d 49       		.uleb128 0x49
 562 009e 13       		.uleb128 0x13
 563 009f 38       		.uleb128 0x38
 564 00a0 0B       		.uleb128 0xb
 565 00a1 00       		.byte	0
 566 00a2 00       		.byte	0
 567 00a3 0E       		.uleb128 0xe
 568 00a4 2E       		.uleb128 0x2e
 569 00a5 00       		.byte	0
 570 00a6 3F       		.uleb128 0x3f
 571 00a7 19       		.uleb128 0x19
 572 00a8 03       		.uleb128 0x3
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 24


 573 00a9 0E       		.uleb128 0xe
 574 00aa 3A       		.uleb128 0x3a
 575 00ab 0B       		.uleb128 0xb
 576 00ac 3B       		.uleb128 0x3b
 577 00ad 0B       		.uleb128 0xb
 578 00ae 27       		.uleb128 0x27
 579 00af 19       		.uleb128 0x19
 580 00b0 11       		.uleb128 0x11
 581 00b1 01       		.uleb128 0x1
 582 00b2 12       		.uleb128 0x12
 583 00b3 06       		.uleb128 0x6
 584 00b4 40       		.uleb128 0x40
 585 00b5 18       		.uleb128 0x18
 586 00b6 9742     		.uleb128 0x2117
 587 00b8 19       		.uleb128 0x19
 588 00b9 00       		.byte	0
 589 00ba 00       		.byte	0
 590 00bb 0F       		.uleb128 0xf
 591 00bc 2E       		.uleb128 0x2e
 592 00bd 00       		.byte	0
 593 00be 3F       		.uleb128 0x3f
 594 00bf 19       		.uleb128 0x19
 595 00c0 03       		.uleb128 0x3
 596 00c1 0E       		.uleb128 0xe
 597 00c2 3A       		.uleb128 0x3a
 598 00c3 0B       		.uleb128 0xb
 599 00c4 3B       		.uleb128 0x3b
 600 00c5 05       		.uleb128 0x5
 601 00c6 27       		.uleb128 0x27
 602 00c7 19       		.uleb128 0x19
 603 00c8 11       		.uleb128 0x11
 604 00c9 01       		.uleb128 0x1
 605 00ca 12       		.uleb128 0x12
 606 00cb 06       		.uleb128 0x6
 607 00cc 40       		.uleb128 0x40
 608 00cd 18       		.uleb128 0x18
 609 00ce 9742     		.uleb128 0x2117
 610 00d0 19       		.uleb128 0x19
 611 00d1 00       		.byte	0
 612 00d2 00       		.byte	0
 613 00d3 10       		.uleb128 0x10
 614 00d4 2E       		.uleb128 0x2e
 615 00d5 00       		.byte	0
 616 00d6 3F       		.uleb128 0x3f
 617 00d7 19       		.uleb128 0x19
 618 00d8 03       		.uleb128 0x3
 619 00d9 0E       		.uleb128 0xe
 620 00da 3A       		.uleb128 0x3a
 621 00db 0B       		.uleb128 0xb
 622 00dc 3B       		.uleb128 0x3b
 623 00dd 05       		.uleb128 0x5
 624 00de 27       		.uleb128 0x27
 625 00df 19       		.uleb128 0x19
 626 00e0 11       		.uleb128 0x11
 627 00e1 01       		.uleb128 0x1
 628 00e2 12       		.uleb128 0x12
 629 00e3 06       		.uleb128 0x6
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 25


 630 00e4 40       		.uleb128 0x40
 631 00e5 18       		.uleb128 0x18
 632 00e6 9642     		.uleb128 0x2116
 633 00e8 19       		.uleb128 0x19
 634 00e9 00       		.byte	0
 635 00ea 00       		.byte	0
 636 00eb 11       		.uleb128 0x11
 637 00ec 34       		.uleb128 0x34
 638 00ed 00       		.byte	0
 639 00ee 03       		.uleb128 0x3
 640 00ef 0E       		.uleb128 0xe
 641 00f0 3A       		.uleb128 0x3a
 642 00f1 0B       		.uleb128 0xb
 643 00f2 3B       		.uleb128 0x3b
 644 00f3 0B       		.uleb128 0xb
 645 00f4 49       		.uleb128 0x49
 646 00f5 13       		.uleb128 0x13
 647 00f6 3F       		.uleb128 0x3f
 648 00f7 19       		.uleb128 0x19
 649 00f8 3C       		.uleb128 0x3c
 650 00f9 19       		.uleb128 0x19
 651 00fa 00       		.byte	0
 652 00fb 00       		.byte	0
 653 00fc 00       		.byte	0
 654              		.section	.debug_aranges,"",%progbits
 655 0000 2C000000 		.4byte	0x2c
 656 0004 0200     		.2byte	0x2
 657 0006 00000000 		.4byte	.Ldebug_info0
 658 000a 04       		.byte	0x4
 659 000b 00       		.byte	0
 660 000c 0000     		.2byte	0
 661 000e 0000     		.2byte	0
 662 0010 00000000 		.4byte	.LFB0
 663 0014 54000000 		.4byte	.LFE0-.LFB0
 664 0018 00000000 		.4byte	.LFB1
 665 001c 0C000000 		.4byte	.LFE1-.LFB1
 666 0020 00000000 		.4byte	.LFB2
 667 0024 0A000000 		.4byte	.LFE2-.LFB2
 668 0028 00000000 		.4byte	0
 669 002c 00000000 		.4byte	0
 670              		.section	.debug_ranges,"",%progbits
 671              	.Ldebug_ranges0:
 672 0000 00000000 		.4byte	.LFB0
 673 0004 54000000 		.4byte	.LFE0
 674 0008 00000000 		.4byte	.LFB1
 675 000c 0C000000 		.4byte	.LFE1
 676 0010 00000000 		.4byte	.LFB2
 677 0014 0A000000 		.4byte	.LFE2
 678 0018 00000000 		.4byte	0
 679 001c 00000000 		.4byte	0
 680              		.section	.debug_line,"",%progbits
 681              	.Ldebug_line0:
 682 0000 AE000000 		.section	.debug_str,"MS",%progbits,1
 682      02006400 
 682      00000201 
 682      FB0E0D00 
 682      01010101 
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 26


 683              	.LASF28:
 684 0000 65704372 		.ascii	"epCr0\000"
 684      3000
 685              	.LASF11:
 686 0006 666C6F61 		.ascii	"float\000"
 686      7400
 687              	.LASF3:
 688 000c 73686F72 		.ascii	"short unsigned int\000"
 688      7420756E 
 688      7369676E 
 688      65642069 
 688      6E7400
 689              	.LASF25:
 690 001f 545F5553 		.ascii	"T_USBFS_EP_CTL_BLOCK\000"
 690      4246535F 
 690      45505F43 
 690      544C5F42 
 690      4C4F434B 
 691              	.LASF34:
 692 0034 55534246 		.ascii	"USBFS_BUS_RESET_ISR\000"
 692      535F4255 
 692      535F5245 
 692      5345545F 
 692      49535200 
 693              	.LASF26:
 694 0048 6570436E 		.ascii	"epCnt0\000"
 694      743000
 695              	.LASF27:
 696 004f 6570436E 		.ascii	"epCnt1\000"
 696      743100
 697              	.LASF19:
 698 0056 6570546F 		.ascii	"epToggle\000"
 698      67676C65 
 698      00
 699              	.LASF1:
 700 005f 756E7369 		.ascii	"unsigned char\000"
 700      676E6564 
 700      20636861 
 700      7200
 701              	.LASF36:
 702 006d 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\USBFS_episr.c\000"
 702      6E657261 
 702      7465645F 
 702      536F7572 
 702      63655C50 
 703              	.LASF14:
 704 0094 72656738 		.ascii	"reg8\000"
 704      00
 705              	.LASF17:
 706 0099 61706945 		.ascii	"apiEpState\000"
 706      70537461 
 706      746500
 707              	.LASF5:
 708 00a4 6C6F6E67 		.ascii	"long unsigned int\000"
 708      20756E73 
 708      69676E65 
 708      6420696E 
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 27


 708      7400
 709              	.LASF20:
 710 00b6 61646472 		.ascii	"addr\000"
 710      00
 711              	.LASF33:
 712 00bb 55534246 		.ascii	"USBFS_SOF_ISR\000"
 712      535F534F 
 712      465F4953 
 712      5200
 713              	.LASF30:
 714 00c9 73696545 		.ascii	"sieEp\000"
 714      7000
 715              	.LASF38:
 716 00cf 55534246 		.ascii	"USBFS_EP\000"
 716      535F4550 
 716      00
 717              	.LASF35:
 718 00d8 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 718      4320342E 
 718      392E3320 
 718      32303135 
 718      30333033 
 719 010b 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 719      20726576 
 719      6973696F 
 719      6E203232 
 719      31323230 
 720 013e 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 720      66756E63 
 720      74696F6E 
 720      2D736563 
 720      74696F6E 
 721              	.LASF12:
 722 0166 646F7562 		.ascii	"double\000"
 722      6C6500
 723              	.LASF29:
 724 016d 55534246 		.ascii	"USBFS_sie_ep_struct\000"
 724      535F7369 
 724      655F6570 
 724      5F737472 
 724      75637400 
 725              	.LASF22:
 726 0181 62756666 		.ascii	"buffOffset\000"
 726      4F666673 
 726      657400
 727              	.LASF10:
 728 018c 75696E74 		.ascii	"uint16\000"
 728      313600
 729              	.LASF31:
 730 0193 55534246 		.ascii	"USBFS_sie_eps_struct\000"
 730      535F7369 
 730      655F6570 
 730      735F7374 
 730      72756374 
 731              	.LASF8:
 732 01a8 756E7369 		.ascii	"unsigned int\000"
 732      676E6564 
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 28


 732      20696E74 
 732      00
 733              	.LASF7:
 734 01b5 6C6F6E67 		.ascii	"long long unsigned int\000"
 734      206C6F6E 
 734      6720756E 
 734      7369676E 
 734      65642069 
 735              	.LASF18:
 736 01cc 68774570 		.ascii	"hwEpState\000"
 736      53746174 
 736      6500
 737              	.LASF32:
 738 01d6 55534246 		.ascii	"USBFS_EP_1_ISR\000"
 738      535F4550 
 738      5F315F49 
 738      535200
 739              	.LASF15:
 740 01e5 73697A65 		.ascii	"sizetype\000"
 740      74797065 
 740      00
 741              	.LASF16:
 742 01ee 61747472 		.ascii	"attrib\000"
 742      696200
 743              	.LASF21:
 744 01f5 65704D6F 		.ascii	"epMode\000"
 744      646500
 745              	.LASF6:
 746 01fc 6C6F6E67 		.ascii	"long long int\000"
 746      206C6F6E 
 746      6720696E 
 746      7400
 747              	.LASF13:
 748 020a 63686172 		.ascii	"char\000"
 748      00
 749              	.LASF37:
 750 020f 473A5C44 		.ascii	"G:\\Documentos\\PSoC Creator\\USBFS_UART01\\USBFS_H"
 750      6F63756D 
 750      656E746F 
 750      735C5053 
 750      6F432043 
 751 023e 49443031 		.ascii	"ID01.cydsn\000"
 751      2E637964 
 751      736E00
 752              	.LASF23:
 753 0249 62756666 		.ascii	"bufferSize\000"
 753      65725369 
 753      7A6500
 754              	.LASF2:
 755 0254 73686F72 		.ascii	"short int\000"
 755      7420696E 
 755      7400
 756              	.LASF9:
 757 025e 75696E74 		.ascii	"uint8\000"
 757      3800
 758              	.LASF24:
 759 0264 696E7465 		.ascii	"interface\000"
ARM GAS  C:\Users\Rolando\AppData\Local\Temp\cc48OKJM.s 			page 29


 759      72666163 
 759      6500
 760              	.LASF4:
 761 026e 6C6F6E67 		.ascii	"long int\000"
 761      20696E74 
 761      00
 762              	.LASF0:
 763 0277 7369676E 		.ascii	"signed char\000"
 763      65642063 
 763      68617200 
 764              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
